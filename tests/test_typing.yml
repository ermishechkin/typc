- case: test_creation_with_annotations
  main: |
    from typc import Struct, UInt8, UInt16

    class Pos(Struct):
      x: UInt16
      y: UInt16

    class Size(Struct):
      height: UInt8
      width: UInt8

    class Rect(Struct):
      pos: Pos
      size: Size

    rect = Rect()
    reveal_type(Rect.pos)         # N: Revealed type is "Type[main.Pos*]"
    reveal_type(Rect.pos.x)       # N: Revealed type is "Type[typc.atoms.UInt16]"
    reveal_type(Rect.size)        # N: Revealed type is "Type[main.Size*]"
    reveal_type(Rect.size.width)  # N: Revealed type is "Type[typc.atoms.UInt8]"
    reveal_type(rect)             # N: Revealed type is "main.Rect"
    reveal_type(rect.pos)         # N: Revealed type is "main.Pos*"
    reveal_type(rect.pos.x)       # N: Revealed type is "typc.atoms.UInt16"
    reveal_type(rect.size)        # N: Revealed type is "main.Size*"
    reveal_type(rect.size.width)  # N: Revealed type is "typc.atoms.UInt8"

- case: test_creation_with_instances
  main: |
    from typc import Struct, UInt8, UInt16

    class Pos(Struct):
      x = UInt16()
      y = UInt16()

    class Size(Struct):
      height = UInt8()
      width = UInt8()

    class Rect(Struct):
      pos = Pos()
      size = Size()

    rect = Rect()
    reveal_type(Rect.pos)         # N: Revealed type is "Type[main.Pos*]"
    reveal_type(Rect.pos.x)       # N: Revealed type is "Type[typc.atoms.UInt16]"
    reveal_type(Rect.size)        # N: Revealed type is "Type[main.Size*]"
    reveal_type(Rect.size.width)  # N: Revealed type is "Type[typc.atoms.UInt8]"
    reveal_type(rect)             # N: Revealed type is "main.Rect"
    reveal_type(rect.pos)         # N: Revealed type is "main.Pos*"
    reveal_type(rect.pos.x)       # N: Revealed type is "typc.atoms.UInt16"
    reveal_type(rect.size)        # N: Revealed type is "main.Size*"
    reveal_type(rect.size.width)  # N: Revealed type is "typc.atoms.UInt8"

- case: test_atom_unary_methods
  main: |
    from typc import UInt16

    obj = UInt16(1)
    res = -obj
    reveal_type(res)              # N: Revealed type is "builtins.int"

- case: test_atom_binary_methods
  main: |
    from typc import Float, UInt8, UInt16

    int_obj1 = UInt8(1)
    int_obj2 = UInt16(2)
    float_obj = Float(3.0)

    reveal_type(int_obj1)              # N: Revealed type is "typc.atoms.UInt8"
    reveal_type(int_obj1 + 1)          # N: Revealed type is "builtins.int"
    reveal_type(int_obj1 + 1.0)        # N: Revealed type is "builtins.float"
    reveal_type(1 + int_obj1)          # N: Revealed type is "builtins.int"
    reveal_type(1.0 + int_obj1)        # N: Revealed type is "builtins.float"
    reveal_type(int_obj1 + int_obj2)   # N: Revealed type is "builtins.int"
    reveal_type(int_obj1 + float_obj)  # N: Revealed type is "builtins.float"
    reveal_type(float_obj + int_obj1)  # N: Revealed type is "builtins.float"

    int_obj1 += int_obj2
    int_obj2 += 1

    reveal_type(int_obj1)              # N: Revealed type is "typc.atoms.UInt8"
    reveal_type(int_obj2)              # N: Revealed type is "typc.atoms.UInt16"

- case: test_atom_inplace_methods
  main: |
    from typc import Float, UInt16

    obj_1 = UInt16(10)
    obj_2 = UInt16(20)
    obj_3 = UInt16(30)
    obj_4 = UInt16(40)
    obj_5 = UInt16(50)
    obj_6 = Float(60.9)

    obj_1 += 1
    obj_2 += 2.6
    obj_3 += obj_5
    obj_4 += obj_6

    reveal_type(obj_1)  # N: Revealed type is "typc.atoms.UInt16"
    reveal_type(obj_2)  # N: Revealed type is "typc.atoms.UInt16"
    reveal_type(obj_3)  # N: Revealed type is "typc.atoms.UInt16"
    reveal_type(obj_4)  # N: Revealed type is "typc.atoms.UInt16"
